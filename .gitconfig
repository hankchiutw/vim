[user]
  name = hank
  email = hankchiu.tw@gmail.com
[core]
  editor = nvim
	precomposeUnicode = true
[color]
  ui = auto
[push]
  default = upstream
[alias]
  au = "!git add -u && git status #"
  ai = "!git add -i && git status #"
  co = checkout
  br = branch
  brd = "!git branch -D `git branch --list \"$1\"` #" # delete branches with wildcard support
  brv = branch -vv
  brva = branch -vva
  ci = commit
  cia = commit --amen
  st = status
  re = remote
  rev = remote -v
  un = reset HEAD
  di = "!(git status; echo; git diff --color=always ${1:-HEAD} $2) | less -R #"
  dii = "!(git status; echo; git difftool -y -x 'icdiff -N' ${1:-HEAD} $2 ) | less -R #"
  sh = "!(git log --numstat -1 ${1-HEAD}; echo; git difftool -y -x 'icdiff -N' ${1:-HEAD}~1 ${1:-HEAD}) | less -R #" # git show in columns
  dic = "!git difftool -y -x 'colordiff -y' $1 $2 | less -R #"
  sort = for-each-ref --sort=-committerdate refs/heads/ --format='%(committerdate:short) %(refname:short) - %(contents:subject)' --count=20
  hs = log --pretty='%C(yellow)%h %C(cyan)%cd %Cblue%aN%C(auto)%d %Creset%s' --graph --date=relative --date-order # history
  cp = cherry-pick
  cpx = cherry-pick -x
  cpa = cherry-pick --abort
  rep = remote prune origin # prune tracking branches not on the remote
  reduce = "!git branch --merged | grep bug | xargs git branch -d" # delete local branches that are merged
  clr = "!git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D" # delete local tracking branches that are not on remote
  file = log -p -M --stat --follow # gitlab like git blame
  line = "!git log --oneline $1 $2 #"
  lines = "!git log --oneline --summary $1 $2 #"
  linen = "!git log --oneline $1 $2 --color=always | less -NR #"
  head = "!git log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%<(6,trunc)%an %Creset%s%Cgreen%d' --date=short --color=always -10 $@ #"
  sum = "!git log --stat $1 $2 #"
  find = "!git log --diff-filter=D --summary -- $1 #" # find the deleted file
  sa = "!git stash push -m $1 $2 #" # stash specific file
  changelog = "!git log --pretty=format:\"* %s (%h)\" ${1:-`git describe`}...${2:-HEAD} #"
